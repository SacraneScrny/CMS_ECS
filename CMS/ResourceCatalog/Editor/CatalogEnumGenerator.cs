using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using Logic.CMS.ResourceCatalog.ScriptableObjects;

using UnityEditor;

using UnityEngine;

namespace Logic.CMS.ResourceCatalog.Editor
{
    public static class CatalogEnumGenerator
    {
        private const string folderHashedEnumsPath = "Logic/CMS/ResourceCatalog/HashEnums";
        private const string folderCatalogTypePath = "Logic/CMS/ResourceCatalog";

        public static void GenerateCatalogTypeEnums()
        {
            string cmsDir = Path.Combine(Application.dataPath, "Resources/CMS/");
    
            var dirs = Directory.GetDirectories(cmsDir, "*", SearchOption.AllDirectories)
                .Select(d => d.Replace("\\", "/"))
                .Select(d => d.Substring(d.IndexOf("CMS/", StringComparison.Ordinal) + 4))
                .Select(d => d.Replace("/", "_"))
                .Where(d => !string.IsNullOrWhiteSpace(d));

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("//     This code was generated by a tool.");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine();
            sb.AppendLine("namespace Logic.CMS.ResourceCatalog");
            sb.AppendLine("{");
            sb.AppendLine("    public enum CatalogType");
            sb.AppendLine("    {");
            sb.AppendLine("        Default,");

            foreach (var dir in dirs)
            {
                string name = Sanitize(dir);
                sb.AppendLine($"        {name},");
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            string fullDir = Path.Combine(Application.dataPath, folderCatalogTypePath);
            if (!Directory.Exists(fullDir))
                Directory.CreateDirectory(fullDir);

            string fullPath = Path.Combine(fullDir, "CatalogType.cs");
            File.WriteAllText(fullPath, sb.ToString(), Encoding.UTF8);

            AssetDatabase.Refresh();
        }
        public static void GenerateHashEnums(CatalogObject catalogObject)
        {
            foreach (var catalog in catalogObject.Catalog)
            {
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated>");
                sb.AppendLine("//     This code was generated by a tool.");
                sb.AppendLine("// </auto-generated>");
                sb.AppendLine();
                sb.AppendLine("namespace Logic.CMS.ResourceCatalog.HashEnums");
                sb.AppendLine("{");
                sb.AppendLine($"    public enum Hash{catalog.Type.ToString()} : uint");
                sb.AppendLine("    {");

                foreach (var item in catalog.Objects)
                {
                    string name = Sanitize(item.Object.gameObject.name);
                    uint hash = item.HashKey;
                    sb.AppendLine($"        {name} = {hash}u,");
                }
                
                sb.AppendLine("    }");
                sb.AppendLine("}");

                string fullDir = Path.Combine(Application.dataPath, folderHashedEnumsPath);
                if (!Directory.Exists(fullDir))
                    Directory.CreateDirectory(fullDir);
                
                string fullPath = Path.Combine(fullDir, $"Hash{catalog.Type.ToString()}.cs");
                File.WriteAllText(fullPath, sb.ToString(), Encoding.UTF8);
                
                AssetDatabase.Refresh();
            }
        }
        
        private static string Sanitize(string s)
        {
            return System.Text.RegularExpressions.Regex.Replace(s, @"\W", "_");
        }
    }
}