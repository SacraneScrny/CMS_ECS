using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

using Logic.CMS.CMSComponents;

using UnityEditor;

using UnityEngine;

namespace Logic.CMS.Editor
{
    public static class PrefabBakerGenerator
    {
        private const string folderPrefabElementsPath = "Logic/CMS/ECS/Generated/";
        
        public static void GeneratePrefabElements()
        {
            var types = Assembly.Load("Assembly-CSharp").GetTypes();
            List<(Type type, FieldInfo[] fields)> typeLists = new ();

            foreach (var type in types)
            {
                if (!type.IsClass || type.IsAbstract) continue;
                if (!typeof(IPrefabTypeBase).IsAssignableFrom(type)) continue;

                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
                if (fields.Length == 0) continue;

                typeLists.Add(new (type, fields));
            }
            
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("//     This code was generated by a tool.");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine();
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using Unity.Entities;");
            sb.AppendLine("namespace Logic.CMS.ECS.Generated");
            sb.AppendLine("{");
            
            foreach (var t in typeLists)
            {
                sb.AppendLine($"    public struct {t.type.Name}Buffer : IBufferElementData, PrefabECS.IPrefabElement");
                sb.AppendLine("    {");
                sb.AppendLine("        public uint HashKey;");
                sb.AppendLine("        public Entity Prefab;");
                sb.AppendLine();
                sb.AppendLine("        public uint GetHash => HashKey;");
                sb.AppendLine("        public Entity GetEntity => Prefab;");
                sb.AppendLine();
                foreach (var field in t.fields)
                {
                    sb.AppendLine($"        public {GetCSharpTypeName(field.FieldType)} {field.Name};");
                }
                
                sb.AppendLine("    }");
            }
            
            sb.AppendLine("}");

            string fullDir = Path.Combine(Application.dataPath, folderPrefabElementsPath);
            if (!Directory.Exists(fullDir))
                Directory.CreateDirectory(fullDir);
                
            string fullPath = Path.Combine(fullDir, $"PrefabElements.cs");
            File.WriteAllText(fullPath, sb.ToString(), Encoding.UTF8);
        }
        static string GetCSharpTypeName(Type type)
        {
            if (type.IsGenericType)
            {
                var genericType = type.GetGenericTypeDefinition();
                var genericArgs = string.Join(", ", type.GetGenericArguments().Select(GetCSharpTypeName));
                return $"{genericType.Name.Split('`')[0]}<{genericArgs}>";
            }

            switch (Type.GetTypeCode(type))
            {
                case TypeCode.Int32: return "int";
                case TypeCode.Single: return "float";
                case TypeCode.Double: return "double";
                case TypeCode.Boolean: return "bool";
                case TypeCode.String: return "string";
                case TypeCode.Int64: return "long";
                case TypeCode.Int16: return "short";
                case TypeCode.Byte: return "byte";
                case TypeCode.Char: return "char";
                case TypeCode.Object: return type.Name; // всё остальное
                default: return type.Name;
            }
        }

        public static void GeneratePrefabAuthoring()
        {
            var types = AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(a => a.GetTypes())
                .Where(t => typeof(IPrefabTypeBase).IsAssignableFrom(t) && !t.IsInterface && !t.IsAbstract)
                .ToList();

            var sb = new StringBuilder();

            // Header
            sb.AppendLine("// AUTO-GENERATED FILE. DO NOT MODIFY MANUALLY.");
            sb.AppendLine("// Generated by CMS → Prefab Buffer Generator");
            sb.AppendLine();
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Linq;");
            sb.AppendLine("using Logic.CMS.ECS.PrefabTypes;");
            sb.AppendLine("using Unity.Entities;");
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine();
            sb.AppendLine("namespace Logic.CMS.ECS.Generated");
            sb.AppendLine("{");
            sb.AppendLine("    [DisallowMultipleComponent]");
            sb.AppendLine("    public class PrefabsAuthoring : MonoBehaviour");
            sb.AppendLine("    {");
            sb.AppendLine("        public CMS CMS;");
            sb.AppendLine();
            sb.AppendLine("        private void OnValidate()");
            sb.AppendLine("        {");
            sb.AppendLine("            gameObject.name = GetType().Name;");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("        private class PrefabsBaker : Baker<PrefabsAuthoring>");
            sb.AppendLine("        {");
            sb.AppendLine("            public override void Bake(PrefabsAuthoring authoring)");
            sb.AppendLine("            {");
            sb.AppendLine("                if (authoring.CMS == null) return;");
            sb.AppendLine("                DependsOn(authoring.CMS);");
            sb.AppendLine();
            sb.AppendLine("                var entity = GetEntity(authoring, TransformUsageFlags.None);");
            sb.AppendLine();

            foreach (var type in types)
            {
                var typeName = type.Name;
                var elementName = $"{typeName}Buffer";

                sb.AppendLine($"                // --- {typeName} ---");
                sb.AppendLine("                {");
                sb.AppendLine($"                    var buffer = AddBuffer<{elementName}>(entity);");
                sb.AppendLine(
                    $"                    foreach (var a in authoring.CMS.Entries.SelectMany(x => x.Objects))");
                sb.AppendLine("                    {");
                sb.AppendLine($"                        if (a.PrefabType is {typeName} p)");
                sb.AppendLine("                        {");
                sb.AppendLine($"                            buffer.Add(new {elementName}()");
                sb.AppendLine("                            {");
                sb.AppendLine("                                HashKey = a.HashKey,");
                sb.AppendLine(
                    "                                Prefab = GetEntity(a.Object, TransformUsageFlags.Dynamic | TransformUsageFlags.Renderable),");

                foreach (var field in type.GetFields(BindingFlags.Instance | BindingFlags.Public))
                {
                    sb.AppendLine($"                                {field.Name} = p.{field.Name},");
                }

                sb.AppendLine("                            });");
                sb.AppendLine("                        }");
                sb.AppendLine("                    }");
                sb.AppendLine("                }");
                sb.AppendLine();
            }

            sb.AppendLine("            }");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            string fullDir = Path.Combine(Application.dataPath, folderPrefabElementsPath);
            if (!Directory.Exists(fullDir))
                Directory.CreateDirectory(fullDir);

            string fullPath = Path.Combine(fullDir, $"PrefabsAuthoring.cs");
            File.WriteAllText(fullPath, sb.ToString(), Encoding.UTF8);
        }


        private static string Sanitize(string s)
        {
            return System.Text.RegularExpressions.Regex.Replace(s, @"\W", "_");
        }
    }
}